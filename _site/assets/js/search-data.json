{"0": {
    "doc": "Editing and Copying the Handbook",
    "title": "Editing and Copying the Handbook",
    "content": "### Editing and Copying the Handbook This page is for future users who want to edit this handbook or who want to make a handbook of their own. **Fork a Copy:** The easiest way to adapt this handbook is to clone the Group Handbook repo from the Kulkarni Group [Github](https://github.com/kul-group) and edit it yourself. See below for editing details. **Starting your own copy:** To make your own handbook, start a Github repository and begin adding pages written in markdown formatting. Make sure the page titles have no spaces and end with `.md`. This will help with converting your handbook to a website. #### Basic Editing See [here](https://www.markdownguide.org/basic-syntax) for a Markdown guide. Though knowing basic Markdown will serve most of your needs, it is useful to know that Github uses slightly different Markdown called [\"Github Flavored Markdown\"](https://guides.github.com/features/mastering-markdown/) which differs in some places. Make **bold text** using `**example text**`, *italics* using `*example text*`, and `code` using `` `example_text` ``. Numbering, bullet points (using dashes), and even [tables](https://www.tablesgenerator.com/markdown_tables) are easy to write in Markdown. ##### Headings Put several hashes in front of your heading, more hashes means a smaller heading. For example `### Heading` will be smaller than `## Heading` when the document is rendered. ##### Links **Internal Links:** The syntax is simple for linking to another page within your repository. Simply write `[link_title](file_name.md)` where \"link_title\" can be any label you want and will show up as blue text, while \"file_name.md\" is the precise title of the page you want to link to (case sensitive). For example, `[example](Introduction.md)` would link the the introduction of this handbook. **External Links:** The syntax follows the same rules as an internal link except instead of the file name, you place a URL in the parenthesis. For example, to link to the Kulkarni group website, write `[example](https://kulkarni.sf.ucdavis.edu/)` #### Publishing as a website [Github Pages](https://pages.github.com/) makes it easy to convert a repo directly into a website, however, it can be pretty expensive if you have several contributors to a repo. Additionally, the repository has to be public to produce a website. You can host the website for free and incorporate new contributions by making a public repository in someone's *individual* account, cloning the original handbook repository to it, and, in your new repository settings, selecting a source and theme for your webpage in the \"GitHub Pages\" section. You can incorporate new changes by adding them to the individual repository which supports the website. ",
    "url": "/Editing_and_Copying_the_Handbook/",
    "relUrl": "/Editing_and_Copying_the_Handbook/"
  },"1": {
    "doc": "Classes to take",
    "title": "Recommended classes to take",
    "content": " ",
    "url": "/docs/1.%20Getting%20Started/Classes%20to%20Take/#recommended-classes-to-take",
    "relUrl": "/docs/1.%20Getting%20Started/Classes%20to%20Take/#recommended-classes-to-take"
  },"2": {
    "doc": "Classes to take",
    "title": "Fall: Courses + Feedback",
    "content": "Core . 1) ECH 252: Statistical Thermodynamics. 2) ECH 253A: Advanced Fluid Mechanics. 3) ECH 259: Advanced Engineering Mathematics. Elective . 1) STA 206: Statistical Methods for Research 1 (R). 2) STA 209: Optimization for Big Data Analytics. 3) ECS 032B: Introduction to Data Structures (Python). 4) ECH 211A: Advanced Physical Chemistry: Statistical Thermodynamics . ",
    "url": "/docs/1.%20Getting%20Started/Classes%20to%20Take/#fall-courses--feedback",
    "relUrl": "/docs/1.%20Getting%20Started/Classes%20to%20Take/#fall-courses--feedback"
  },"3": {
    "doc": "Classes to take",
    "title": "Winter: Courses + Feedback",
    "content": "Core . 1) ECH 253C: Advanced Mass Transfer. 2) ECH 256: Chemical Kinetics and Reaction Engineering. Elective . 1) STA 220: Data &amp; Web Technologies for Data Analysis (R/ Python). 2) CHE 210A: Quantum Chemistry: Introduction &amp; Stationary-State Properties 3) PHY 140A: Introduction to Solid State Physics 4) ECS 036A: Programming &amp; Problem Solving . ",
    "url": "/docs/1.%20Getting%20Started/Classes%20to%20Take/#winter-courses--feedback",
    "relUrl": "/docs/1.%20Getting%20Started/Classes%20to%20Take/#winter-courses--feedback"
  },"4": {
    "doc": "Classes to take",
    "title": "Spring: Courses + Feedback",
    "content": "Elective . 1) STA 221: Big Data &amp; High Performance Statistical Computing (Python). 2) STA 208: Statistical Methods in Machine Learning. 3) EMS 285: Advanced Computational Materials Science (Python). 4) CHE 210B: Quantum Chemistry: Time-Dependent Systems . Feel free to take any other course you might find interesting and related, if you like it add it here. Do note that the lower division undergraduate courses (000-100) do not apply for credits towards your graduate degree. ",
    "url": "/docs/1.%20Getting%20Started/Classes%20to%20Take/#spring-courses--feedback",
    "relUrl": "/docs/1.%20Getting%20Started/Classes%20to%20Take/#spring-courses--feedback"
  },"5": {
    "doc": "Classes to take",
    "title": "Classes to take",
    "content": " ",
    "url": "/docs/1.%20Getting%20Started/Classes%20to%20Take/",
    "relUrl": "/docs/1.%20Getting%20Started/Classes%20to%20Take/"
  },"6": {
    "doc": "HPC & Workstation Setup",
    "title": "Setting up",
    "content": "Follow the below instructions to get setup in the group . ",
    "url": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#setting-up",
    "relUrl": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#setting-up"
  },"7": {
    "doc": "HPC & Workstation Setup",
    "title": "Procedure for Mac + Monitors and office space",
    "content": ". | Ambar will have to order the Mac and Monitor + peripherals for you once you join the group. | Ask Ambar to add you to prepurchasing so it is easier to get reimbursed for conferences and travel in the future. | Speak to the other group members to find out your office space assignment and location. | . ",
    "url": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#procedure-for-mac--monitors-and-office-space",
    "relUrl": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#procedure-for-mac--monitors-and-office-space"
  },"8": {
    "doc": "HPC & Workstation Setup",
    "title": "Account Setup",
    "content": "This section lists the various places you should set up an account using your UC Davis credentials. Having access to the sites in the section below will be necessary for doing your research and collaborating with the group. Having accounts in the non-essential section are useful but less important. ",
    "url": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#account-setup",
    "relUrl": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#account-setup"
  },"9": {
    "doc": "HPC & Workstation Setup",
    "title": "Essential",
    "content": ". | Box: Login through UC Davis and have Ambar add you to the group box . | Slack: Add using UC Davis email, have Ambar add you to the group . | Messaging Ambar: Ambarish Kulkarni on UC Davis Slack | Messaging the Group: kul-announcements | . | NERSC: Fill out form on this page, later Ambar will add you (and set up MFA, DUO) . | Setting up sshproxy keys: https://www.nersc.gov/users/connecting-to-nersc/connecting-with-ssh/ | . | XSEDE: Fill out form on this page . | HPC1 and HPC2: Set up your SSH key using these instructions. Fill out the forms on this page. Then send your public SSH key to the HPC1 and HPC2 administrators. | VPN Set up the vpn to be able to access campus resources such as the library from outside. | Github: Create an account and have a group member add you to the kul-group organization. | . ",
    "url": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#essential",
    "relUrl": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#essential"
  },"10": {
    "doc": "HPC & Workstation Setup",
    "title": "Non-Essential Software",
    "content": ". | Zotero or Mendeley: for reference management . | XQuartz for opening graphical displays when connected to a remote host, e.g. supercomputers . | MobaXterm for opening graphical displays when connected to a remote host, e.g. supercomputers. | . ",
    "url": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#non-essential-software",
    "relUrl": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/#non-essential-software"
  },"11": {
    "doc": "HPC & Workstation Setup",
    "title": "HPC & Workstation Setup",
    "content": " ",
    "url": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/",
    "relUrl": "/docs/1.%20Getting%20Started/HPC%20&%20Workstation%20Setup/"
  },"12": {
    "doc": "Python Setup",
    "title": "Setup Python",
    "content": "The following will guide you on how to setup and use python for the simulations being run by the group. Step 1 . | Download and install from Anaconda | You can use the standard inbuilt spyder IDE from Anaconda or Download and setup VS Code or PyCharm separately. | VS | PyCharm you can get the Professional edition with your UC Davis student account | . Step 2 . Go over these tutorials in detail . | Getting started with Anaconda | Getting started with python | A great starting guide | . Step 3 . | Ask people if you have any doubts after this and make sure you are familiar with using python in your conda environment and in your macbook. | . ",
    "url": "/docs/1.%20Getting%20Started/Python%20Setup/#setup-python",
    "relUrl": "/docs/1.%20Getting%20Started/Python%20Setup/#setup-python"
  },"13": {
    "doc": "Python Setup",
    "title": "Python Setup",
    "content": " ",
    "url": "/docs/1.%20Getting%20Started/Python%20Setup/",
    "relUrl": "/docs/1.%20Getting%20Started/Python%20Setup/"
  },"14": {
    "doc": "1. Getting Started",
    "title": "Welcome to the Kulkarni Group. This document is to help you get setup with the essentials needed to conduct research with the group",
    "content": " ",
    "url": "/docs/1.%20Getting%20Started/title_page1/#welcome-to-the-kulkarni-group-this-document-is-to-help-you-get-setup-with-the-essentials-needed-to-conduct-research-with-the-group",
    "relUrl": "/docs/1.%20Getting%20Started/title_page1/#welcome-to-the-kulkarni-group-this-document-is-to-help-you-get-setup-with-the-essentials-needed-to-conduct-research-with-the-group"
  },"15": {
    "doc": "1. Getting Started",
    "title": "1. Getting Started",
    "content": " ",
    "url": "/docs/1.%20Getting%20Started/title_page1/",
    "relUrl": "/docs/1.%20Getting%20Started/title_page1/"
  },"16": {
    "doc": "Atomic Simulation Environment",
    "title": "Atomic Simulation Environment",
    "content": " ",
    "url": "/docs/2.%20Learning%20the%20Basics/ASE/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/ASE/"
  },"17": {
    "doc": "Atomic Simulation Environment",
    "title": "Table of contents",
    "content": ". | Atomic Simulation Environment . | Learning ASE | Installation | Reading and writing file | Indexing | Adding and deleting atoms | Moving and rotating atoms | Neighbors | ASE GUI . | Useful Commands | Manipulate atoms manually through ASE GUI | . | Working examples | . | . Familiarize yourself with this package throughly. Learning ASE . ASE is a python package using for setting up, manipulating, visualizing and analyzing atomic structures. Detailed documentation can be found here: ASE . Installation . | Make sure you have already have python 3.6 or newer, Numpy downloaded. | The simplest way to install ase: $ pip install --upgrade --user ase | Before running the test, be sure that you enable ase in your conda environment. | A detailed instruction for installation can be found here: https://wiki.fysik.dtu.dk/ase/install.html | . Reading and writing file . | Use the read() and write() in ase.io module | Example: | . from ase.io import read, write structure = read('atoms_file.cif') # create atoms object named 'structure' by reading the file named atoms_file.cif write('new_file.traj', structure) # write a new file of the structure with the name new_file.traj . | Detailed instruction: File Reading | . Indexing . need to add more . indice_H = [atom.index for atom in atoms if atom.symbol=='H'] . Adding and deleting atoms . atoms.append thing . You can combine two atoms objects using the + operator: combined_atoms = atoms1 + atoms2. ‘combined_atoms’ will have the unit cell shape of atoms1, so order of addition matters! . So, for example, you can add a hydrogen atoms using: . from ase import Atom h_atom = Atom('H', (1, 1, 1)) # Creates an H atom at the (1, 1, 1) position structure_with_hydrogen = structure + h_atom # new atoms object which has all the atoms in 'structure' and an H atom at (1, 1, 1) . You can make a molecule using: . from ase.build import molecule ch3oh = molecule('CH3OH') . You can build a metal surface slab using: . from ase.build import surface s1 = surface('Au', (2, 1, 1), 9) # makes a gold surface along the [2 1 1] plane with 9 layers s1.center(vacuum=10, axis=2) # centers the slab in the unit cell with 10 angstroms of vacuum along the y-axis . Moving and rotating atoms . talk about translate and wrap . Move a set of atoms using atoms.translate([x,y,z]) where x,y,z are the amounts to move in x/y/z direction (in angstroms). Rotate a set of atoms using: . atoms.rotate(90, 'z') # rotates atoms 90 degrees around z-axis atoms.rotate(90, (0, 0, 1)) # rotates atoms 90 degrees around (0, 0, 1) vector (The z-axis) atoms.rotate('x', 'y') # rotates the x-axis into the y-axis atoms.rotate((1, 0, 0), (0, 1, 0)) # rotates the (1, 0, 0) axis into the (0, 1, 0) axis . Neighbors . Obtain the indicies of the neighbors of a particular atom using: . from ase.neighborlist import NeighborList, natural_cutoffs nl = NeighborList(natural_cutoffs(atoms), self_interaction=False, bothways=True) nl.update(atoms) # rerun this line anytime atoms in structure move neighbors = nl.get_neighbors(atom_index)[0] # list of neighbor indicies around the atom at atom_index. the '[0]' is important! . ASE GUI . ASE GUI is used to visualize and manipulate atoms. It can also be used to visualize atoms on an HPC, but this is slow. To use ASE GUI on the terminal, navigate to the file you want to view on the command line, then type ase gui [FILENAME] and hit enter. A window should pop up. Useful Commands . | two finger click and drag will allow you to rotate the atoms object. | press ‘1’: view from the x axis | press ‘2’: view from the y axis | press ‘3’ or ‘=’: view from the z axis | press ‘Cntl+B’: toggles between bond view and atom view, bond view is more useful | Click an atom: displays atom properties (#index, element, position…) | Select Multiple atoms: 1-finger click and drag to highlight atoms, or Cntl + click to select individual atoms | Move: ‘Cntl+M’ will allow you to move selected atoms using your arrow keys. Viewing direction changes what your arrow keys do. | Rotate: ‘Cntl+R’ will allow you to rotate selected atoms using your arrow keys. Viewing direction changes what your arrow keys do. | . Manipulate atoms manually through ASE GUI . | change atoms: Select atom(s)-&gt; Edit-&gt; Modify-&gt; change it to the desired atom(s) | add atoms: Edit-&gt; Add atoms, you can select chemical symbol or formula to add and also assign its position | delete atoms: select atom(s)-&gt; press the ‘delete’ key (Note that you can make use of invert selection under edit to delete the atoms that are not within your selection) | repeat the structure: View-&gt; Repeat | If you want to save this manipilated structure, make sure to Cntl + S | . Detailed instruction: https://wiki.fysik.dtu.dk/ase/ase/gui/gui.html?highlight=ase%20gui#module-ase.gui . Working examples . ASE Tutorials . ",
    "url": "/docs/2.%20Learning%20the%20Basics/ASE/#table-of-contents",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/ASE/#table-of-contents"
  },"18": {
    "doc": "BASH Commands & Essentials",
    "title": "Learning BASH",
    "content": "The following will guide you and point to the nessescary resources to learn the basic BASH commands for use on the terminals and try some basic exercises. ",
    "url": "/docs/2.%20Learning%20the%20Basics/BASH/#learning-bash",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/BASH/#learning-bash"
  },"19": {
    "doc": "BASH Commands & Essentials",
    "title": "Table of contents",
    "content": ". | Learning BASH . | . | Getting Started with Bash: Basic Commands | Moving Around | Moving Files | Opening Files | Editing Files | Run commands on multiple directories | . | . | . Getting Started with Bash: Basic Commands . This is a basic introduction to the most commonly used bash commands. A more detailed tutorial can be found here. You can practice most of this on your local machine. Essentially, the command line allows you to move around your computer, make new files, edit documents, and run simple programs. While this is easy to do on your local machine using Finder or Anaconda, when using a HPC, almost everything must be done using the command line. To start, open iTerm or other terminal software. Moving Around . | See what directory you are in at anytime by typing pwd (and then pressing enter) | See what items are in your current directory by typing ls | Move to one of the subdirectories by typing cd [directory_name] for example, in your home directory (the one you start in when you open iTerm) cd Desktop will take you to your Desktop, and then typing ls will show you the same files that you see on your Desktop normally. | Return to your home directory at anytime by typing cd ~/ or just cd | Go from your current directory to the one that contains it (or ‘above’ it) by typing cd ../ | Go to a particular directory by typing cd path/to/dir where ‘path/to/dir’ is the string you get when you type pwd in the particular directory you wish to go to | . Moving Files . | copy a file from one location to another using cp path/to/source path/to/destination | copy a folder from one location to another using cp -r path/to/source path/to/destination | copy a file from one location to another using mv path/to/source path/to/destination | copy a folder from one location to another using mv path/to/source path/to/destination | delete a file using rm filename. Be careful, there is no way to undo this action!! | delete a folder using rm -r foldername. Be careful, there is no way to undo this action!! | . Note that in the previous examples, ‘path/to/folder’ and ‘path/to/file’ refer to the file paths you would need to navigate to that item. For example if you wanted to copy ‘zeolite.traj’ from the Documents folder to the Desktop, you could use cp ~/Documents/zeolite.traj ~/Desktop/.. However, if you are already in the Documents folder, you do not need to type the entire path, you can instead write cp zeolite.traj ~/Desktop/. since the terminal will automatically copy the file named ‘zeolite.traj’ in your current folder. Opening Files . | make a new file by typing ‘vi filename’ where filename is the title of the file you want to create. This will open a blank file in the vi editor, more details on using vi in the next section. | open and existing file by typing ‘vi filename’ where filename is the title of the file you want to open. Once again this will open the file in a vi editor. | . Editing Files . The vi editor seems simple but has many important commands. A more thorough list can be found here. The basic commands are: . | move around using the arrow keys | edit part of the file by pressing the ‘i’ key, in the lower left corner you will see the word ‘INSERT’ indicating that you are in insert mode. Here you can delete characters, write new ones, and add new lines. However, your changes do not automatically save! Get out of insert mode by pressing the escape key. | quit vi and save your work by holding down the shift key and pressing Z twice (shift + ZZ) | . Run commands on multiple directories . The following one-liners allow you to run a command for multiple directories or folders without retyping the same thing over and over again. And here are a few options to do that. | Write simple loops. Here is an example of a for loop. for each_dir in 00_*; do mv $each_dir/folder1/file1 $each_dir/folder2 ; done. This one liner allows you to run the ‘mv’ command only for folders that start with ‘00_’. Note that the ‘$’ sign needs to be added before ‘each_dir’. | An alternative way without using loops is to use ‘echo’. Here is an example: echo T1_T1*/ | xargs -n 1 cp vasp_opt.py, where it will move a Python script called ‘vasp_opt.py’ into every single folder in the current directory that start with ‘T1_T1’ | In the meantime, you can also use control operators to increase flexibility of your one liner since now you are dealing with many directories instead of one. For example, for each_dir in 00_*; do cp $ each_dir/opt_500/my.traj new.traj || cp each_dir/opt_400/my.traj new.traj ; done. This means if the sub-directory ‘opt_500’ does not have ‘my.traj’ in it, instead of returning an error, it will copy ‘my.traj’ from a different sub-folder. The symbol “||” is an ‘OR’ condition which execute the command after “||” if the command before it failed. | Similarly, you can use operators such as ‘&amp;&amp;’ or ‘!’ as well in your one liner. And one more example would be mv !(folder1 &amp;&amp; folder2) folder1. This command moves everything in the current directory except folder1 and folder2 into folder1. | . ",
    "url": "/docs/2.%20Learning%20the%20Basics/BASH/#table-of-contents",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/BASH/#table-of-contents"
  },"20": {
    "doc": "BASH Commands & Essentials",
    "title": "BASH Commands & Essentials",
    "content": " ",
    "url": "/docs/2.%20Learning%20the%20Basics/BASH/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/BASH/"
  },"21": {
    "doc": "Github and Git",
    "title": "Using Git and Github for code and version control",
    "content": "The following will guide you and point to the nessescary resources to learn how to use Git and Github effectively and subsequently try some basic exercises. ",
    "url": "/docs/2.%20Learning%20the%20Basics/Git+Github/#using-git-and-github-for-code-and-version-control",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Git+Github/#using-git-and-github-for-code-and-version-control"
  },"22": {
    "doc": "Github and Git",
    "title": "Github",
    "content": "Create an account on Github. Git is a version control system that lets you manage and keep track of your source code history. GitHub is a cloud-based hosting service that lets you manage Git repositories. If you have open-source projects that use Git, then GitHub is designed to help you better manage them (https://devmountain.com/blog/git-vs-github-whats-the-difference/). ",
    "url": "/docs/2.%20Learning%20the%20Basics/Git+Github/#github",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Git+Github/#github"
  },"23": {
    "doc": "Github and Git",
    "title": "Getting started with Git",
    "content": "You do not need GitHub to use git, but you cannot use GitHub without using git. Here’s a quick guide on getting started with git. Here is a tutorial for using git and github via PyCharm: (https://www.youtube.com/watch?v=4ukhZvOmAtk&amp;t=66s). ",
    "url": "/docs/2.%20Learning%20the%20Basics/Git+Github/#getting-started-with-git",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Git+Github/#getting-started-with-git"
  },"24": {
    "doc": "Github and Git",
    "title": "Git Cheatsheets",
    "content": ". | Github Cheatsheet | Atlassian | . ",
    "url": "/docs/2.%20Learning%20the%20Basics/Git+Github/#git-cheatsheets",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Git+Github/#git-cheatsheets"
  },"25": {
    "doc": "Github and Git",
    "title": "Github and Git",
    "content": " ",
    "url": "/docs/2.%20Learning%20the%20Basics/Git+Github/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Git+Github/"
  },"26": {
    "doc": "HPC Tricks",
    "title": "HPC Tricks",
    "content": "STEP 1: creating HPC1 and HPC2 account . Once you have created your HPC accounts (details here) you can login your hpc1 account through . ssh-XY username@hpc1.ucdavis.engr.edu ssh-XY username@hpc2.ucdavis.engr.edu . STEP 2: creating .bashrc file on the terminal . create a .bashrc file via $ vim .bashrc in your local terminal, copy the text under . # COLORS export LSCOLORS=Exfxcxdxbxegedabagacad export CLICOLOR=1 PS1=\"[Local: \\W]\\\\$ \" # Alias alias g='grep' alias ag='ase gui' # Accounts alias hpc1=' ssh -XY username@hpc1.engr.ucdavis.edu' alias hpc2=' ssh -XY username@hpc2.engr.ucdavis.edu' alias cori=' ssh -XY -l username@cori.nersc.gov' # Download/ uploads #hpc1 from_hpc1() { scp -r username@hpc1.engr.ucdavis.edu:$1 $2 } to_hpc1() { scp -r $1 username@hpc1.engr.ucdavis.edu:$2 #hpc2 from_hpc2() { scp -r username@hpc2.engr.ucdavis.edu:$1 $2 } to_hpc2() { scp -r $1 username@hpc2.engr.ucdavis.edu:$2 . STEP 3: creating .profile file on the terminal . create a .profile file via $ vim .profile in your local terminal, copy the text under . if [ -s ~/.bashrc ]; then source ~/.bashrc; fi . ",
    "url": "/docs/2.%20Learning%20the%20Basics/HPC%20Tricks/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/HPC%20Tricks/"
  },"27": {
    "doc": "KulTools",
    "title": "KulTools",
    "content": "Clone the following repository to the HPC1, HPC2, and CORI. | https://github.com/kul-group/kultools | . ",
    "url": "/docs/2.%20Learning%20the%20Basics/KulTools/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/KulTools/"
  },"28": {
    "doc": "KulTools",
    "title": "Table of contents",
    "content": ". | KulTools . | . | VASP Test | Adjusting parameters in submission script | Gamma point | Material type | Job type | Structure selection | Additional parameters | Kultools directory output | . | . | . VASP Test . Instructions . | add module load vasp/5.4.4 to your .bashrc file and reload it or reconnect | run file 00_make_molecule.py by running python3 00_make_molecule.py | verify that the file start.traj was created | Verify that the correct header is being used for each cluster. | Verify that the sys.path.insert() is set to wherever your kultools directory lives. | run the second file with slurm by typing sbatch 01_submit_job.py (you might need a init.py file for kultools.py to be recognized as a module). | Check the job.out and job.err files for errors | . See below for making adjustments to the 01_sumbit_job.py script. Adjusting parameters in submission script . Kultools creates an object which contains all the relevant information needed to successfully run a DFT calculation using vasp. Below are some attributes of the KT class which can be adjusted for your specific system. Gamma point . If you need to run a gamma point calculation, set gamma_only = True when creating an instance of the kT class. Material type . When creating and instance of the KT class, a structure_type must be specified. Available types: . | zeo | mof | metal | gas-phase | . These structure type tags are helpful in setting vasp parameters that are appropriate for your system of choice. See kultools.py to see the parameters set for each material type. See the 01_submit_job.py script for an example of how to set the structure_type. Job type . When running a DFT calculation in vasp, a calculation type must be specified. The following job types are available in the .set_calculation_type() module: . | opt | opt_fine | vib | spe | md | solv | nebs and dimer will be available soon | . See the 01_submit_job.py script for an example of how to set the calculation type. Structure selection . See the 01_submit_job.py script for an example of how to set the structure. Make sure periodic boundary conditions are set. | atoms = io.read(‘start.traj’) | atoms.pbc=True | kt.set_structure(atoms) | . Additional parameters . Any VASP parameters can be specified by using the .set_overall_vasp_params() module. Potential parameters that the user may want to specificy include but are not limitied to: . | xc (the functional you wish to use) | ivdw (set this tag to include van der waals corrections, our group typically uses ivdw = 12) | nsw (number of steps) | kpts | encut | . See vasp wiki for more information on various paramaters. Kultools directory output . The current naming scheme for the directory created from your vasp run with kultools is as follows: . directory = dir_name + ‘’ + str(func_for_dir) + ‘’ + str(encut_for_dir) + ‘_’ + str(kpts_for_dir) . where, . | dir_name = the name of the calculation type (such as opt or spe) | func_for_dir = whatever functional you set for xc ( such as PBE) | encut_for_dir = whatever your encut value was set to | kpts_for_dir = whatever your kpts were set to | . Ex) opt_PBE_400_221/ . ",
    "url": "/docs/2.%20Learning%20the%20Basics/KulTools/#table-of-contents",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/KulTools/#table-of-contents"
  },"29": {
    "doc": "Other Packages",
    "title": "Other Packages",
    "content": "These are short guides to getting started with other, specialized packages that we use in the group. ",
    "url": "/docs/2.%20Learning%20the%20Basics/Other%20Packages/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Other%20Packages/"
  },"30": {
    "doc": "Other Packages",
    "title": "Table of contents",
    "content": ". | Other Packages . | . | DeePMD | QuantEXFS | Multiscale Atomisric Zeolite Environment (MAZE) . | What is MAZE? | How to download it | Documentation | . | Microkinetic Modelling (MKM) | Fireworks | VMD and VESTA | . | . | . DeePMD . DeePMD is a package that learns interatomic potentials using molecular dynamics data. Ty has created an additional package called DPTools which streamlines the process of training a model using DeePMD. See the documentation here for further details. QuantEXFS . (under construction) . Multiscale Atomisric Zeolite Environment (MAZE) . What is MAZE? . MAZE is an open-source python-based package developed in our group, which simplifies workflows for zeolite-related studies. It’s fully compatible with ASE, which means all the ASE functions would also work in the MAZE environment, plus many more. A more comprehensive list of features can be found in the Github link below. If you have any doubts about how some functions work or have suggestions on new functions that should be included, talk to Jiawei. How to download it . Detailed guidelines for installing the package can be found through this link: https://github.com/kul-group/MAZE-sim . Documentation . Here’s the link for the package tutorials: https://kul-group.github.io/MAZE-sim/build/html/index.html Note that this webpage does not yet contain functions related to the Extra-framework class, so if you have questions, ask Jiawei. Microkinetic Modelling (MKM) . (under construction) . Fireworks . Fireworks is a package that can manage computational jobs for you. We developed a workflow for using this package with VASP. The repo and instructions for using it can be found here . VMD and VESTA . (under construction) . ",
    "url": "/docs/2.%20Learning%20the%20Basics/Other%20Packages/#table-of-contents",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Other%20Packages/#table-of-contents"
  },"31": {
    "doc": "Python Basics",
    "title": "Python Basics",
    "content": "The following will guide you and point to the nessescary resources to learn python and try some basic exercises. ",
    "url": "/docs/2.%20Learning%20the%20Basics/Python/Python%20Basics/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Python/Python%20Basics/"
  },"32": {
    "doc": "Python Basics",
    "title": "Table of contents",
    "content": ". | Python Basics . | . | Getting started | Using PyCharm | Python practice problems | Python Documentation | Some Specific Guidelines for Writing Code | High Level Python Guidelines . | Object-oriented programming (OOP) | Data structures and algorithms | . | Some Smaller Topics . | Debug &amp; Unit testing | Type hinting | Inheritance | . | References | . | . | . Getting started . Make sure you have Anaconda downloaded and an IDE to write code in. Using PyCharm . PyCharm is a dedicated Python Integrated Development Environment (IDE) providing a wide range of essential tools for Python developers, tightly integrated to create a convenient environment for productive Python, web, and data science development. You could download the package through this website: (https://www.jetbrains.com/pycharm/). It is free for students if you apply for their free educational license: (https://www.jetbrains.com/community/education/#students). Note that you would need to renew the license annually. Python practice problems . See here (https://www.practicepython.org) for good python practice problems. Once you are comfortable with manipulating lists, for loops, and if/else statements, focus on the ASE practice problems. You will learn the more complicated stuff later. Python Documentation . See here (https://docs.python.org/3/) for the documentation. Some Specific Guidelines for Writing Code . | Naming: Make sure your names for variables are descriptive. h_atom_dict is better than atom_dict or h_atoms . | Comments: Code is read more often than it is run. Comments should be extensive and clear. Imagine you are seeing this code for the first time, do the comments explain everything? Use docstrings for functions and classes. | Use Python’s functionality to make code shorter, but don’t overdo it. For example Python’s list comprehension can help remove a for loop while still being readable. But, if you find yourself trying to combine several steps into a single line, stop. Break these steps over several lines and explain them with comments. | Start small, test, then build more. You may be confident that several lines of code you wrote will work as intended, but test them anyways. It is a nightmare to find a bug inside dozens of connected functions over hundreds of lines of code. Instead, build a small working part, then make sure it outputs what you expect on several test cases and make sure it integrates nicely with the rest of the program. Only then should you start writing something new. | Search for help, then ask for help. A lot of coding issues can be resolved by a websearch. If you are stuck, first search for solutions to your problem online. Usually this will resolve your issue within 20 minutes. If you are still stuck, it is important that you ask the group for help (this can save you a lot of time!). Message the group on Slack with your problem and attempted solutions. If that doesn’t work, ask someone to look over your code with you, oftentimes a new person will be able to see what you are missing. | . High Level Python Guidelines . Summarized from materials covered in ECS 32B. Object-oriented programming (OOP) . OOP is a coding style where we define both the type of the data structures and functions that can be applied to those data structures. This way of treating data structures as objects allows the programmers to build connections between different objects; for example, one inherits characteristics from another. Another advantage compared to sequential coding is that OOP enables programmers to dissect a problem into sections where we call them classes without constantly having to worry about the whole picture. Data structures and algorithms . Understanding data structures, such as arrays, trees, heaps, graphs and Python built-ins, allows programmers to store information where it can be accessed efficiently (Beginner theorists may not be needing this as much as OOP) . Some Smaller Topics . Debug &amp; Unit testing . Pycharm has fancy debugging tools that allow programmers to step into the code and update all local variables after executing each line of code. Unit testing is an essential part of OOP since it helps to verify that the parts of the program (functions) do return results that match our expectations. For that reason, the test cases are usually written along with the program. Type hinting . Type hints are hints that are given to the variables; for example, the inputs and outputs of a function, regarding their data types. It is useful especially when multiple programmers are working on the same project. Inheritance . Objects with similar properties can inherit characteristics from the parent object without rewriting everything from the parent object. For example, different types of zeolite objects such as MFI inherits from the zeolite class. The child objects can also override the methods inherited from the parent. References . | https://david.goodger.org/projects/pycon/2007/idiomatic/handout.html | https://www.python.org/dev/peps/pep-0008/ | . ",
    "url": "/docs/2.%20Learning%20the%20Basics/Python/Python%20Basics/#table-of-contents",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Python/Python%20Basics/#table-of-contents"
  },"33": {
    "doc": "Python",
    "title": "Python",
    "content": " ",
    "url": "/docs/2.%20Learning%20the%20Basics/Python/Python/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Python/Python/"
  },"34": {
    "doc": "Python Resources",
    "title": "Python Resources",
    "content": ". | Python Data Science Handbook | Learning Python Book | . ",
    "url": "/docs/2.%20Learning%20the%20Basics/Python/Resources%20for%20Python/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Python/Resources%20for%20Python/"
  },"35": {
    "doc": "Essential Reading",
    "title": "Essential Books and Papers everyone must read",
    "content": " ",
    "url": "/docs/2.%20Learning%20the%20Basics/Reading/#essential-books-and-papers-everyone-must-read",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Reading/#essential-books-and-papers-everyone-must-read"
  },"36": {
    "doc": "Essential Reading",
    "title": "Table of contents",
    "content": ". | Essential Books and Papers everyone must read . | Resource 1 | Resource 2 | Resource 3 | . | . Resource 1 . Name + Link . Resource 2 . Name + Link . Resource 3 . Name + Link . ",
    "url": "/docs/2.%20Learning%20the%20Basics/Reading/#table-of-contents",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Reading/#table-of-contents"
  },"37": {
    "doc": "Essential Reading",
    "title": "Essential Reading",
    "content": " ",
    "url": "/docs/2.%20Learning%20the%20Basics/Reading/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/Reading/"
  },"38": {
    "doc": "Python Scripts",
    "title": "Python Scripts",
    "content": "Link to groups python scripts on box . ",
    "url": "/docs/2.%20Learning%20the%20Basics/python_scripts_on_box/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/python_scripts_on_box/"
  },"39": {
    "doc": "2. Learning the basics",
    "title": "Here tutorials and documentation have been provided to help you learn the basics of the various tools used by the group",
    "content": " ",
    "url": "/docs/2.%20Learning%20the%20Basics/title_page2/#here-tutorials-and-documentation-have-been-provided-to-help-you-learn-the-basics-of-the-various-tools-used-by-the-group",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/title_page2/#here-tutorials-and-documentation-have-been-provided-to-help-you-learn-the-basics-of-the-various-tools-used-by-the-group"
  },"40": {
    "doc": "2. Learning the basics",
    "title": "2. Learning the basics",
    "content": " ",
    "url": "/docs/2.%20Learning%20the%20Basics/title_page2/",
    "relUrl": "/docs/2.%20Learning%20the%20Basics/title_page2/"
  },"41": {
    "doc": "Effective Figures and Visualization",
    "title": "Effective Figures and Visualization",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/Figures%20&%20Visualization/",
    "relUrl": "/docs/3.%20Effective%20Strategies/Figures%20&%20Visualization/"
  },"42": {
    "doc": "Effective Figures and Visualization",
    "title": "Making Images",
    "content": "Guidelines . | Use descriptive axes and titles, include units, and make the fontsize large (~16 pt.). Include other relevant technical information (like the DFT functional you used) in a textbox below the image. | Use appropriate color schemes. Colorbrewer can help you pick combinations of colors which look good. Use different shades to accomodate colorblind users. | Don’t put too much data on a single plot. What are you trying to say? Like your writing, your images should “tell a story”. | . Note: Many past QE, Prelim, and other presentations can be found on Box. Use the images here as a reference: What works? What Doesn’t? . Outside References . | Seaborn is a Python package which can make better, more sophisticated plots than matplotlib . | Designing Images for Colorblind People . | Colorbrewer . | Matplotlib Documantation is useful. The tutorials can help a first-time user get started. | A wide range of color options are available with the matplotlib ‘xkcd’ tag (yes, that XKCD), the list of colors is here . | . ",
    "url": "/docs/3.%20Effective%20Strategies/Figures%20&%20Visualization/#making-images",
    "relUrl": "/docs/3.%20Effective%20Strategies/Figures%20&%20Visualization/#making-images"
  },"43": {
    "doc": "Being Organized",
    "title": "Being organized",
    "content": ". | Directory naming scheme should be consistent and descriptive. * | . ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#being-organized",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#being-organized"
  },"44": {
    "doc": "Being Organized",
    "title": "Organizing Files on HPC’s",
    "content": "It is important to keep directory structures consistent across the clusters. Only important files should be saved in the home directory. ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#organizing-files-on-hpcs",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#organizing-files-on-hpcs"
  },"45": {
    "doc": "Being Organized",
    "title": "Organizing Files on your computer",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#organizing-files-on-your-computer",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#organizing-files-on-your-computer"
  },"46": {
    "doc": "Being Organized",
    "title": "Backing up files",
    "content": "Most important files should be backed up on your UCD box. The python submission script, optimized traj file, and the tar.gz zipped vasprun.xml should be saved for each run. ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#backing-up-files",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#backing-up-files"
  },"47": {
    "doc": "Being Organized",
    "title": "General workflow",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#general-workflow",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#general-workflow"
  },"48": {
    "doc": "Being Organized",
    "title": "Preparing scripts and structures for running jobs",
    "content": "When preparing submission scripts or generating structures for jobs, it is best to do this within and IDE (ex) PyCharm) on your local machine. Job preparation is best done locally because… . | An IDE provides debugging tools and enables error detection when generating python scripts | ASE GUI runs much faster locally. It is painfully slow on the clusters. | . ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#preparing-scripts-and-structures-for-running-jobs",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#preparing-scripts-and-structures-for-running-jobs"
  },"49": {
    "doc": "Being Organized",
    "title": "Transfering data/scripts to and from the cluster",
    "content": "Check out rsync documentation online. | ex) transfering from local to HPC2: rsync -aP local_path username@hpc2address:hpc2_path | . ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#transfering-datascripts-to-and-from-the-cluster",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#transfering-datascripts-to-and-from-the-cluster"
  },"50": {
    "doc": "Being Organized",
    "title": "Locations for running jobs on cluster",
    "content": "Depending on the cluster you have various locations where you can run jobs and store data. | ex) Cori . | projectdirs | SCRATCH (This is short term storage. Can run jobs here and then transfer most important files to a projectdir or local for long term storage. | Local (only most important files should be stored here as there is limited space) | . | . ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#locations-for-running-jobs-on-cluster",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#locations-for-running-jobs-on-cluster"
  },"51": {
    "doc": "Being Organized",
    "title": "Box",
    "content": "Box should be utilized for long term storage of… . | submission scripts | any relevant python scripts | project data (see backing up files above) | . Ask people in the group for helpful python scripts. ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#box",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/#box"
  },"52": {
    "doc": "Being Organized",
    "title": "Being Organized",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/",
    "relUrl": "/docs/3.%20Effective%20Strategies/Organizing%20and%20Saving%20data/"
  },"53": {
    "doc": "Effective presentations",
    "title": "Effective presentations",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/Presentations/",
    "relUrl": "/docs/3.%20Effective%20Strategies/Presentations/"
  },"54": {
    "doc": "Effective presentations",
    "title": "Table of contents",
    "content": ". | Effective presentations . | Presentations . | Drafting | Slides | Speaking | . | . | . Presentations . Effectively communicating your work is essential to being a productive researcher. Presentations are used to update the group, communicate with other groups, and play a central role in your future exams and interviews. The following guidelines focus on how to create clear, effective presentations. See the Prelim and QE pages for more details on these specific presentations. The Data Visualization page can help with formatting images in your presentation. Drafting . | make an outline of your slides first . | Make a rough set of slides with a few images or some text describing what will be on the slide. If you can, run this draft by someone to get suggestions on the structure and flow of the presentation . | fill out your slides with more details and images until you could do almost all of a presentation in meeting with this rough draft. Present quickly in meeting and get feedback . | Perfect your presentatio, practice with others, and incorporate feedback. | . Slides . | Keep your slides simple. Your audience will have a hard time absorbing a lot of text or data at once. It is better to break things up over multiple slides. | Use fewer words. Most audience members do not read the words on the slide (myself included). It is better to use a few words or descriptive titles to note the main takaways and remind you what to discuss. For example, “Sn Zeolite -&gt; Regioselectivity” is better than “Tin containing zeolite catalysts show higher regioselectivity”. If it is important for your audience to know, say it yourself, because the audience will not necessarily read the words. | Use images. Well labeled images are the best way to explain your point. Oftentimes, a well labeled plot is the only thing you need on a slide to illustrate your point. | Use an outline. Have a slide at the beginning of your talk going over the outline, remind the audience where you are in the outline at each step in the presentation. | Use backup slides. Some students include a lot of background and justification in their slides in preparation for potential questions. This is not the best approach since the additional content can distract the audience. Instead, include slides designed to explain a particular concept or answer a question at the end of your presentation. That way, you can refer to these backup slides (if a question comes up) without distracting from your main point in the presentation. | Include proper attributions and acknowledgements: Make sure to cite your sources, and acknowledge the people that helped you and your research. | . You can look at old presentations on the group Box folder as a reference, pay attention to which slides are confusing and which are easy to understand. Speaking . | Make sure to practice your presentation several times. It is helful to practice with the group, and with people outside the group to get different perspectives . | Anticipate questions. Ask many people for their potential questions on each slide and figure out what answer you would give to these questions during your actual presentation. Add backup slides as needed to answer questions. | Work on any speaking difficulties you might have. If you find yourself saying ‘um’ and ‘uh’ a lot, practice pausing to gather your thoughts. If you find yourself having anxiety about your presentation, talk to some group members about how they dealt with it or look into resources for dealing with performance anxiety. | . ",
    "url": "/docs/3.%20Effective%20Strategies/Presentations/#table-of-contents",
    "relUrl": "/docs/3.%20Effective%20Strategies/Presentations/#table-of-contents"
  },"55": {
    "doc": "Improving Productivity",
    "title": "Productivity",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/Productivity/#productivity",
    "relUrl": "/docs/3.%20Effective%20Strategies/Productivity/#productivity"
  },"56": {
    "doc": "Improving Productivity",
    "title": "Table of contents",
    "content": ". | Productivity . | Build capacity first | A/B/C Time | Say No to things | Meetings | Work Sustainably | . | . Note: This advice is merely a suggestion, take some time to figure out what keeps you productive. Build capacity first . It may feel like you can get more stuff done by focusing on small, object-level tasks. For example, you might be tempted to prepare and run many atomic structures individually (spending a large amount of time on each job) in order to avoid writing a script that can automate this task. However, it is far more important for you to streamline the way you work, especially early in your research. Though it will come with some time investment, automating routine tasks will make you much more productive in the long run. Towards the beginning of a project, when you have a good sense of the types of tasks you will need to perform, set aside some time to get organized and write scripts to accelerate these tasks. When you get to the data-processing stage of your work, put an emphasis on automatically obtaining data from output files and plotting it, this is much faster and less error prone than processing data “by hand”. Some things to consider: . | The group has written a lot of scripts which can carry out routine atomic manipulations and prepare input structures for you. Consider adapting this code to the task at hand. | There are basic scripts to submit many computational jobs in parallel and several DFT steps can be packaged into a single job with the kT package. | The linux command line has powerful tools to manipulate files, edit text, and synchronize files across computers, look into these solutions when you want to reorganize your files | There may be scripts within the group that can be used to plot data. You will want to write scripts to plot data that can easily be reused for new datasets. | . A/B/C Time . One useful approach is to divide your time based on how your productivity changes throughout the day. Break your goals up into small tasks, consider how demanding each task is, and schedule them into one of these bins: . “A time” is reserved for your most important and urgent tasks. This is typically the most cognitively demanding part of your day when you need to focus most. Tasks like writing, coding, or data analysis might fit here. Determine what time in your day you are most productive, and reserve that time to work. Turn off distractions (including Slack) and avoid meetings during this time. Many people find early mornings to be most productive, but everyone is different. “B time” is reserved for slightly less demanding tasks like presentations, teaching, or reading papers. You might schedule these tasks after lunch for example. “C time” is reserved for routine tasks which dont require much thinking like data entry, grading, checking on submitted jobs, or meetings. Schedule these tasks during times in your day when you aren’t as productive. The late afternoon may be good time for this. Try to maintain a to-do list with specific, small tasks to complete and schedule them based on the A/B/C timeslots. Make sure your total workload is sustanable over the long term. Say No to things . You have to be honest with yourself and others about what workload you can handle. It’s better to tell collaborators that you can’t work on a project than to make promises you can’t keep. If you feel like you are oversubscribed, prioritize your projects and let collaborators know that you have to prioritize other projects. Meetings . Meetings (especially with your advisor) can be helpful. However, you can end up spending a lot of time in unproductive meetings if you don’t take specific steps to avoid this. | Meetings are more productive when you prepare for them. You should try to have specific goals and an agenda for each meeting. If you are leading the meeting, set an agenda and send it to people. Use the agenda to avoid getting side-tracked during the meeting and take notes. | Set the frequency of meetings based on the pace of research. You should meet with collaborators only when you have enough results to show and discuss. For outside collaborations, meeting once every ~3 weeks seems to be appropriate. | Meetings tend to use up all of their alloted time. It’s usually better to set short meeting times and move quickly; 30 minute meetings are a good default when meeting with Ambar or students in the group. Less frequent meetings with collaborators may require 45 minutes or an hour. | Keep meetings small, it’s very hard for large groups of people to be productive in meetings. Try to avoid large, unproductive meetings as much as possible. | Try to schedule meetings during your “C time” and avoid having meetings during your “A time” | . Work Sustainably . It’s important to ensure that your research effort is sustainable over the long term. It will take years to complete your degree, so you have to maintain healthy habits and steady effort over this period. | Prioritize your mental and physical health | Set reasonable goals for yourself | Keep a steady pace and take regular breaks during the day. Make sure you are taking appropriate time off, getting enough sleep, and have time to do stuff outside of work. | Make sure you have support within the group, department, or university. Its important to find people you can talk to when issues arise. Try to identify problems early and address them. | . ",
    "url": "/docs/3.%20Effective%20Strategies/Productivity/#table-of-contents",
    "relUrl": "/docs/3.%20Effective%20Strategies/Productivity/#table-of-contents"
  },"57": {
    "doc": "Improving Productivity",
    "title": "Improving Productivity",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/Productivity/",
    "relUrl": "/docs/3.%20Effective%20Strategies/Productivity/"
  },"58": {
    "doc": "Reading Papers",
    "title": "Reading Papers",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/Reading%20Papers/",
    "relUrl": "/docs/3.%20Effective%20Strategies/Reading%20Papers/"
  },"59": {
    "doc": "Reading Papers",
    "title": "Table of contents",
    "content": ". | Reading Papers . | Reading papers | Reading Tips | Finding Papers . | Google Scholar | Other | . | Organizing Your Literature | Getting up to Speed | . | . Reading papers . This section goes over general advice for how to read papers, find relevant publications, organize your literature, and suggests which papers to read for each subgroup. Reading Tips . | Use Mendeley or other reference manager to organize the literature. Use the watch folder functionality. | Read in the following order: conclusions/summary –&gt; intro –&gt; figures/captions –&gt; whole paper. | Summarize the main results in a power point slide. | Practice makes perfect: you will get more efficient at reading papers over time, don’t worry if it is difficult initially. | For less important papers, be judicious with your time, focus on paper sections with info which is new to you. | For a “quick and dirty” read of a paper, read the introduction and figures. The introduction gives you the background/significance of the work and summarizes the papers approach and results, while the figures summarize the data and techniques used in depth. | . Finding Papers . Google Scholar . Searches: Search Google Scholar using quotations around key terms you want in a reference. Look through ‘related references’ and ‘citing references’ for relevant papers. Citation Alerts: For particularly important papers, set a ‘citation alert’ on Google Scholar, this will notify you of new papers which cite the original paper. Author Alerts: For important authors in your field, you can set ‘author alerts’ on Google Scholar. This will notify you when an author has new papers out. Other . | Connected Papers is a site which uses citation networks to suggest new papers. Input a paper you know is important, and allow a few minutes for the citation graph to generate. This can help find new papers which don’t necessarily have similar keywords or cite each other (google scholar is better for this) . | ACS publications are important in our field. Looking through recently published and preprint papers in relevant journals can help. | We have dedicated Slack channels for posting new/interesting literature. Look over new suggestions and check the history! . | UC Davis Library Subject Guides for Chemical Engineering, Chemistry, and Materials Science link to and summarize the major scientific databases for each subject (scroll down to ‘Major Databases’) . | . Organizing Your Literature . | Use your reference manager’s folder feature to create descriptive folders for important subtopics. For example, you could have a “Ethane Oligomerization” for research papers studying that reaction and a “Methods” folder which has papers on new computational methods in your field. | Maintain a slide deck for each important subtopic with paper summaries. This will make it easy to do your lit reviews. | Use your reference manager’s tagging feature to note which papers are important, unread, challenging etc. | Each time you download a paper, make sure the citation information is correct, do not blindly trust your reference manager! You can often download the correct citation from the webpage you downloaded your paper from. This will save you a lot of time when you are making a bibliography . | Keep the collection of references for a paper you are writing together. This makes them easy to find, reference, and fix when you are writing. | . Getting up to Speed . | The group maintains a literature repository of papers each student should read here. | Look for relatively recent review articles in your field. You can use their citations to learn a topic in depth. | Look for highly cited researchers in your field: What are they doing? What buzzwords do they use? . | . ",
    "url": "/docs/3.%20Effective%20Strategies/Reading%20Papers/#table-of-contents",
    "relUrl": "/docs/3.%20Effective%20Strategies/Reading%20Papers/#table-of-contents"
  },"60": {
    "doc": "Effective writing",
    "title": "Effective writing",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/Writing/",
    "relUrl": "/docs/3.%20Effective%20Strategies/Writing/"
  },"61": {
    "doc": "Effective writing",
    "title": "Table of contents",
    "content": ". | Effective writing . | Drafting | Writing Tips | Other Tips | Outside Resources | . | . Drafting . | Write a detailed outline. A detailed outline summarizes everything you want to say and the structure of what you are going to write. | Write a “really rough draft”. Write a draft with no concern for clarity, grammar, or completeness. Just get something on paper. Don’t worry, nobody will see it. | Refine your “really rough draft” into a better draft and get feedback. This draft doesn’t have to be good, you just want to get feedback on the overall structure and flow. | Edit or rewrite your draft with comments in mind. Focus on simple, clear language and make sure the overall flow of ideas make sense. | Continue to get feedback from others and rewrite until you are satisfied. Make sure you meet any length or formatting requirements! . | . Writing Tips . | Use simple words when possible. Using a lot of technical terms can be confusing to read, even for a technical audience. | Know your audience. Most people, will not know your specific field. If you work on zeolites, do your readers know what zeolites are and why they are important? If your audience works in an adjacent field, do they know the history of innovations in your field? Emphasize the parts of your research your audience is interested in. | Make sure your ideas flow logically. Reorder sentences and paragraphs you have written so that each idea builds on the next. You will hear often that your writing should “tell a story”. | . Other Tips . | When incorporating images, make rough drafts of the images and don’t worry about updating them until the very end. The structure of the other components of the paper as well as formatting requirements will change a lot, don’t change your images until you need to. | Keep your references organized and accurate! This will save you a lot of time when making a bilbiography. | Many examples of writing for the Prelim, QE, proposals, and publications are stored in the group Box. These can be used to guide your writing: what works, what doesn’t? . | . Outside Resources . | The UC Davis University Writing Program has workshops, consultations, and writers retreats for graduate students here. Their online writing resources are helpful too. | Though it doesn’t apply everywhere, the ACS Guide to Scholarly Communication can help guide your writing. | . ",
    "url": "/docs/3.%20Effective%20Strategies/Writing/#table-of-contents",
    "relUrl": "/docs/3.%20Effective%20Strategies/Writing/#table-of-contents"
  },"62": {
    "doc": "3. Effective tips & strategies",
    "title": "A compilation of good practises to follow for writing,presenting etc",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/title_page3/#a-compilation-of-good-practises-to-follow-for-writingpresenting-etc",
    "relUrl": "/docs/3.%20Effective%20Strategies/title_page3/#a-compilation-of-good-practises-to-follow-for-writingpresenting-etc"
  },"63": {
    "doc": "3. Effective tips & strategies",
    "title": "3. Effective tips & strategies",
    "content": " ",
    "url": "/docs/3.%20Effective%20Strategies/title_page3/",
    "relUrl": "/docs/3.%20Effective%20Strategies/title_page3/"
  },"64": {
    "doc": "Advising",
    "title": "Advising Schedule",
    "content": " ",
    "url": "/docs/4.%20Group%20Policies/Advising%20Schedule/#advising-schedule",
    "relUrl": "/docs/4.%20Group%20Policies/Advising%20Schedule/#advising-schedule"
  },"65": {
    "doc": "Advising",
    "title": "Table of contents",
    "content": ". | Advising Schedule . | Individual meeting schedule | Group meeting schedule | Biannual review | . | . Individual meeting schedule . | different meeting schedules may work better for different students . | At beginning of your tenure in the group, you will meet ~1x/week with Ambar with additional meetings as necessary . | 3rd years will meet once every 2 weeks with additional meetings with Ambar or collaborators as needed . | . Group meeting schedule . | See the group webpage for the quarterly schedule . | Meeting schedule is 1x/week with focus on older students giving conference-like talks and newer students doing smaller updates or practicing for QE/Prelim. | . Biannual review . Each student should have a twice annual review with Ambar. Make sure to address: . | Are you being productive on the current project? What is going well? What could be improved? What might be slowing you down? . | Do you have sufficient support to complete your projects? Is your workload to heavy or light? . | What has Ambar been doing well? What can Ambar do better? . | What have you been doing well? What can you do better? . | Do you feel like you are building skills to set you up for your career? . | What is your timeline for graduation? What is the order of projects and their timeline? . | . ",
    "url": "/docs/4.%20Group%20Policies/Advising%20Schedule/#table-of-contents",
    "relUrl": "/docs/4.%20Group%20Policies/Advising%20Schedule/#table-of-contents"
  },"66": {
    "doc": "Advising",
    "title": "Advising",
    "content": " ",
    "url": "/docs/4.%20Group%20Policies/Advising%20Schedule/",
    "relUrl": "/docs/4.%20Group%20Policies/Advising%20Schedule/"
  },"67": {
    "doc": "Conferences",
    "title": "Conferences",
    "content": "Going to conferences is a valuable way to share your research, network, and learn about trends in your field. Aim to attend 1-2 conferences per year if possible. If you find a conference you would like to attend, talk to Ambar about it and come up with a plan for what you might present there. Some conferences or workshops you may want to attend: . | SUNCAT | NAM | ACS | PCCS | . ",
    "url": "/docs/4.%20Group%20Policies/Conferences%20and%20Workshops/",
    "relUrl": "/docs/4.%20Group%20Policies/Conferences%20and%20Workshops/"
  },"68": {
    "doc": "4. Group Policies",
    "title": "The group policies and mentorship compact",
    "content": " ",
    "url": "/docs/4.%20Group%20Policies/title_page4/#the-group-policies-and-mentorship-compact",
    "relUrl": "/docs/4.%20Group%20Policies/title_page4/#the-group-policies-and-mentorship-compact"
  },"69": {
    "doc": "4. Group Policies",
    "title": "4. Group Policies",
    "content": " ",
    "url": "/docs/4.%20Group%20Policies/title_page4/",
    "relUrl": "/docs/4.%20Group%20Policies/title_page4/"
  },"70": {
    "doc": "Career Goals - Academia",
    "title": "Career Goals",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals1/#career-goals",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals1/#career-goals"
  },"71": {
    "doc": "Career Goals - Academia",
    "title": "Table of contents",
    "content": ". | Career Goals . | Ambar’s perspective on getting academic job in the US after a UC Davis PhD | . | . Ambar’s perspective on getting academic job in the US after a UC Davis PhD . | Finding jobs in academia is hard. The major challenge is that there are too few positions (tenure-track) available compared to the number of eligible candidates. This is especially true in “old” fields such as catalysis, where every university (top 50) will have some presence in this field. | Another (unfortunate) aspect is that academic-lineage matters quite a bit. Thus, it is common that top schools (top 10) will tend to hire applicants who did their UG, PhD and/or post doc from top research groups (this tends to correlate with top “ranked” institutions). Indeed, a candidate with MIT/Stanford/Caltech in their resume will have an inherent advantage in interviews, especially at top 10 universities. This is unavoidable, so make peace with it. This is not true to the same extent for 10 - 50 ranked universities. | If the goal is to obtain an academic position in the US, then you need: . | A productive PhD at UC Davis (i.e., a good number of first or co-first author publications in top journals, new science insights, or developing new tools) | A strong postdoc at a top 10 school and/ or a highly renowned research group | Strong communication skills (i.e., write a strong research proposal, give engaging research talks, and interview well in-person) | Creativity, originality and/or depth in a specific topic. | . | Although the above discussion may seem a bit depressing, it’s actually not that bad. This is because we know exactly what the schools are looking for when they hire a new faculty member. They/we want someone who is excellent at research and reasonably good teaching. Being successful at research requires that the candidate is able to: . | Generate extramural funding to support the students | Hire and manage a cohort of students to do the research | Write some high impact papers etc. | “Fit” within the department in terms of their long term vision, department culture and research needs. | . | Before proceeding further, it is useful to go over the numbers. Let’s say UC Davis chemical engineering has an opening for a tenure-track faculty member. We will likely get a few hundred applications. Of those, 40 - 50 will be evaluated .. ahem .. more carefully. Then, we will request recommendation letters for maybe 10, and invite 5 for interviews. Of those 3 - 5 in-person interviews, we will make offers to the top candidate. If the top candidate declines, we’ll move down the list and so on. At each stage of the down selection process, different aspects are being evaluated. With a PhD from this group and a reasonable list of publications, you will most likely be competing for 50 → 10 cut. Some schools may want a hardcore microscopist, you won’t have the necessary skillset and won’t make the cut. However, if the school is looking for a theorist or a modeler, then the decision to request letters will be made based on your research proposal and your resume. At this stage, your ability to interview/ chalk talk etc does not matter. Thus, your research proposal and AICHE meet the faculty candidate poster and talks are very important to make the 50 → 10 cut. | So, the question is then how to write a good research proposal and give excellent talks/ posters. While it is great that all of this is entirely within your control, this is also the downside. | How to have good content for a strong research proposal? The advice depends on who you ask. Two broad schools of thought. (1) Be “better” than everyone else in a specific field, or (2) have a unique training/ perspective/ skill set that anyone else. | Use the PhD to learn as many skills as you can. This is the central advantage of our group. Multiple levels of theory, different applications, many experimental collaborations. Thus, I recommend aiming for option #2. | Publish! This is a whole section by itself. | Write the paper as you are doing the work. | Read as much of the relevant literature as possible. This allows you to find what is interesting and write papers that have a broad appeal. | Attend talks from different areas of research. | Find a post doc that is sufficiently different. Think about (PhD from UC Davis) + (training in post doc) == X-factor. For each possible postdoc mentor, think about what X-factor will make you special. Iterate. Discuss. | Network with other students within and outside. These are your support group. They’ll probably remain friends for future decades. | Network with other professors. They will remain your mentors for decades. | . | . ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals1/#table-of-contents",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals1/#table-of-contents"
  },"72": {
    "doc": "Career Goals - Academia",
    "title": "Career Goals - Academia",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals1/",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals1/"
  },"73": {
    "doc": "Career Goals - Industry",
    "title": "Career Goals",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals2/#career-goals",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals2/#career-goals"
  },"74": {
    "doc": "Career Goals - Industry",
    "title": "Table of contents",
    "content": ". | Career Goals . | Getting a Job in Industry . | Skills | Displaying Your Skills . | Linkedin | Github | Resume/Cover Letter | . | Networking . | Finding people to interview | Running an informational interview | . | Preparing for job interviews | . | . | . ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals2/#table-of-contents",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals2/#table-of-contents"
  },"75": {
    "doc": "Career Goals - Industry",
    "title": "Getting a Job in Industry",
    "content": "Skills . Towards the latter half of your degree, it’s important to think about the portfolio of skills you are building. You have more skills than you think, research in this group will build skills in materials simulation, programming, data analysis, and communication, among other things. Compare this to the skills you need for the job you want. If there is something you feel you are missing, talk to Ambar about doing a project that can emphasize that skill. There are some industry-specific skills which may not come up much during your research such as familiarity with SQL, AWS, or other techniques. Spend some time practicing these skills outside of research if needed. Displaying Your Skills . Armed with this portfolio of skills, now you need to advertize them effectively: . Linkedin . | Create a Linkedin page and add a professional headshot | Make as many connections as possible with people you know | Write a short about section (~2 paragraphs). Use what other people have written as a guide. | Add jobs and achievements to your page, you can also add links to your papers | . Github . | Clean up existing scripts and add them to your Github account | Collaborate on projects within the group using Github | Practice pushing code to a personal repo and add to it regularly | For larger projects, write a clear README file and create a Read the Docs for it. | . Resume/Cover Letter . Polish your CV and prepare a cover letter for the job you are applying to. Formatting is different for different fields so ask for an example from someone and ask people to look over your CV in informational interviews. Also consider creating a Twitter account and/or a personal website. Networking . A lot of people feel weird about networking, but it’s an important part of finding a job and maintaining a professional network. Networking mostly comes down to meeting people during collaborations, conferences, or through friends. Your professional network can help you find a job in the future! . One important part of this is conducting “Informational Interviews” with people working in industry. Finding people to interview . This is where your personal network comes in; ask people you know to connecting you with people in the industry you want to work in. You can also ask for a 1-on-1 meeting with people you interact with at conferences or in your collaborations. You can try reach out to people on Twitter, Linkedin, or cold-email though your success rate will be much lower if you don’t know each other offline. Running an informational interview . Informational Interviews typically follow this pattern: . | Describe your background, interests, and career goals | Ask your interviewee about their background and current position | Ask several prepared questions about their work, important skills you should build, etc. | Wrap-up the meeting, thank them for their time, and send a thank-you email afterwards. Follow up on anything you discussed in the meeting such as other people they could connect you to. | . Some good questions to ask: . | What is your day-to-day work like? | What kinds of skills should I build to be a competitive applicant for a position in your industry? | What are the current trends in your industry? | Are there current openings at your company or related companies that I should know about? | Ask curiosity questions and follow-up questions about their work/research | Can you look over my CV? What could be improved in your opinion? | Are there other people you think it would be good for me to talk to? Can you connect me to them? (this is the most important question, your interviewee may be able to introduce you to other people in the field, building your personal network) | . Some other notes: . | Aim to ask only a few (~5) questions. They usually lead to a longer conversation which you don’t want to rush. | An informational interview is not a job interview and you should avoid asking your interviewee to hire you. | Make sure you are on time and don’t go over time (unless they are cool with it), they are spending valuable time on you! | Dress a little more formally than you would normally and be respectful, you want to make a good impression. | Take notes on what they say and try to ask good follow-up questions. | You may want to consider keeping in touch with this person over the long term by reaching out regularly or meeting them at conferences. | . Preparing for job interviews . Different industries have different interview practices but you will want to prepare for a technical interview and a behavioral interview designed to assess personal fit. Look up what kinds of questions get asked in technical interviews in your field and prepare for them. Companies will also ask behavioral interview questions to assess personal fit, such as “describe a situation where you demonstrated integrity”. To prepare for these, research the STAR interview technique and prepare for common behavioral interview quesitons. You will want to prepare a few stories about yourself that demonstrate good qualities and practice using them to answer interview questions. ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals2/#getting-a-job-in-industry",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals2/#getting-a-job-in-industry"
  },"76": {
    "doc": "Career Goals - Industry",
    "title": "Career Goals - Industry",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals2/",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Career-Goals2/"
  },"77": {
    "doc": "Graduation",
    "title": "Graduating",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Graduating/#graduating",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Graduating/#graduating"
  },"78": {
    "doc": "Graduation",
    "title": "Table of contents",
    "content": ". | Graduating . | Graduating 101 | . | . Graduating 101 . | Write your thesis . | Meet with your thesis advisors . | Schedule your exit seminar . | Paperwork . | Exit interview: . | What advice do you have to improve the group? | What project ideas do you have? | What went well during your degree? | What could be improved? | What is next? | How can we reach you in the future? | . | Make sure that others have access to your old data and scripts, share the repositories . | Move things over to your non-school email and move important stuff off of school accounts, you will lose access a couple months after graduating . | Make sure to return any keys, computers, electronics, or other equipment . | Add important knowledge to the group handbook. It’s especially important to guide new students on how to get started on your project. | . ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Graduating/#table-of-contents",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Graduating/#table-of-contents"
  },"79": {
    "doc": "Graduation",
    "title": "Graduation",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Graduating/",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Graduating/"
  },"80": {
    "doc": "Preliminary Exam",
    "title": "Preliminary Examination",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Prelims/#preliminary-examination",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Prelims/#preliminary-examination"
  },"81": {
    "doc": "Preliminary Exam",
    "title": "Table of contents",
    "content": ". | Preliminary Examination . | Preliminary Examination | Prelim Preparation . | What to expect? | What exactly happens? | . | Useful | Slides | . | . Preliminary Examination . The Preliminary Examination, or prelim, is an exam taken at the end of your first year to assess your ability to read and understand the literature in your field. It is typically taken any time between first week of May to mid-May. Prelim Preparation . What to expect? . Grace will send you a doodle poll asking for your availability and then sets up an exam where 5 professors are assigned as your Prelim Committee (including Ambar). What exactly happens? . 10 mins presentation (the committee really appreciates if the timing is perfect so PRACTICE!!!) followed by 20 min questions (it’s usually a bit longer than stated). | Task | Timeline | Supports | . | Pick 4-5 papers out of the many related to your project | First week of Jan | Self | . | Shortlist 2 | Mid Jan | Ambar | . | Prepare 10 mins ppt | Jan End | Check out with group members | . | Read and improve your ppt | Through winter quarter | Self; discuss with the group, practice presentations | . | Write an abstract based on guidelines sent by grace | first week of April is the deadline | Get it approved by Ambar | . | Set up formal practice sessions with the group | As soon as you feel comfy but must be starting April | Teamwork, the more the better | . | On receiving the list of committee members set up individual practice sessions with members of their group (seek help from members of our group if needed) | As many sessions as you want and people are ready to help with. Before your GSO practice session | Do not hesitate to ask for help. This is the best way to improve and tweak your ppt according to the committee. | . | Sign-up for GSO practice session | Pick a date close to your prelim day | Thank the seniors offering help | . | Make reading related literature your daily routine till the time you feel comfortable with your 2 main papers | Though out the Spring quarter | Self | . Useful . Pick a paper that deals more with the core ECH courses of your choice/strength (eg. Pick a paper that talks more about thermo if you like thermo or kinetics or mass transfer etc.) PLAY ON YOUR STRENGTHS!!! Make sure you brush up Ambar’s kinetics class or any other class that you took which was taught by one of the Prelim committee members. Particularly, if it is related to your paper. Please don’t over prepare. You need to know how much is too much or your brain crashes while answering. If the people you practiced with suggest that you are good, then that is it. Do not keep reading and digging further. Slides . Keep your slides uncomplicated. Try to come-up with a story for your slides to make sense. What is on the slides is what you will be asked. People in the group will help you to improve you slides (make sure you see previous prelim ppts from members of the group). Most importantly STAY CALM and CONFIDENT!!! . Note: the group saves previous prelim presentations on Box. Use these as a guide. ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Prelims/#table-of-contents",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Prelims/#table-of-contents"
  },"82": {
    "doc": "Preliminary Exam",
    "title": "Preliminary Exam",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Prelims/",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Prelims/"
  },"83": {
    "doc": "Qualifying Exam",
    "title": "Qualifying Examinations",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Qualifying/#qualifying-examinations",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Qualifying/#qualifying-examinations"
  },"84": {
    "doc": "Qualifying Exam",
    "title": "Table of contents",
    "content": ". | Qualifying Examinations . | Qualifying Examination . | What to Expect | . | Writing the Dissertation | Pro-Tips | . | . Qualifying Examination . What to Expect . The qualifying examination, or QE, is an oral exam typically taken in the spring quarter of your second year. It consists of a 30 minute presentation along with questions from the commitee which typically takes 2.5 hours. The focus of the presentation is to outline your research plan for the rest of your Ph.D., including previous research, theory, and a timeline for future work. Writing the Dissertation . Your dissertation is a 10-15 page document where you summarize the background, proposed work, and preliminary results for your research. It is easiest to write your dissertation after you are mostly done making your slides, so that the two can be coherent. See the writing section for advice on how to write your dissertation. The group maintains past QE dissertations on Box, use these as a guide. Pro-Tips . | An easy QE is just a well prepared QE. You got this! . | Make a full rough draft of QE presentation over winter break. | Practice in January with a few different people, make changes. | Get the low-down on professors and schedule the exam ASAP to make the stress real. Scheduling time with 5 professors is hard so do this at least 3 months in advance . | 2 months before the exam, regularly by yourself with slides, then eventually without slides, burn the images and words into your memory. Daniel did this while walking to get in exercise and learn to change attention. | Questions will come up in your head, find the answers if unknown and practice answering during solo practice too. | Practice with group(s), multiple times! Daniel did 5 full practices in the Moule group. Practice until its easy. | Gather other people’s questions and feedback on your slides, make sure you know the answers to questions and incorporate feedback. | Your committee members are encouraged to sit with you and hear your QE, take advantage of that. You can ask them which topics they are interested in and utilize that to anticipate questions and know what parts of your presentation to focus on to make it more interesting. | Review the fundamentals: know how to explain your research starting from quantum mechanics, to DFT, to computation of properties, and have an understanding of the errors/assumptions made along the way. | Review the literature: read a significant number of papers in your field. Look over the related papers of your committee members, this will help you anticipate questions and understand their general approach to problems. | . Note: the group has past QE presentations on Box. Use these as a guide. ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Qualifying/#table-of-contents",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Qualifying/#table-of-contents"
  },"85": {
    "doc": "Qualifying Exam",
    "title": "Qualifying Exam",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/Qualifying/",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/Qualifying/"
  },"86": {
    "doc": "5. Steps to a PhD",
    "title": "Details about the prelims and Qualifying exams and how to prepare for them",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/title_page5/#details-about-the-prelims-and-qualifying-exams-and-how-to-prepare-for-them",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/title_page5/#details-about-the-prelims-and-qualifying-exams-and-how-to-prepare-for-them"
  },"87": {
    "doc": "5. Steps to a PhD",
    "title": "5. Steps to a PhD",
    "content": " ",
    "url": "/docs/5.%20Steps%20to%20a%20PhD/title_page5/",
    "relUrl": "/docs/5.%20Steps%20to%20a%20PhD/title_page5/"
  }
}
